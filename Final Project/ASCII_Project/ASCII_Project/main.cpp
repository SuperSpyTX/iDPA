#include <iostream>
#include <string>
#include <vector>
#include "Renderer.h"
//#include "MultiPoint.h"
//#include "AbstractPoint.h"
#include <time.h>

using namespace std;

AbstractPoint createAwesomeEffect();
AbstractPoint createIDPAPresents();
void runTheShow(Renderer renderer);
void showMenu();

// menu functions
void kappehSurprise(Renderer renderer);
void sekritSurprise(Renderer renderer);
void sekrit2(Renderer renderer);
void bouncingLetters(Renderer renderer);
void scrollEverywhere(Renderer renderer);
void testing(Renderer renderer);
Renderer options(Renderer renderer);

void deBug()
{
	cin.clear();
	fflush(stdin);
}

int main() 
{
	srand(time(NULL));
	system("color b");
	Renderer renderer(20, 42); // 20, 42
	//renderer.showBorders = false;
	int attemptsToGlitch = 0; // For game breakers :D
	renderer.showDots = false;

	//runTheShow(renderer); // On launch day ONLY!

	bool sappiku = false; // WHO CARES
	do {
		if (sappiku) {
			break;
		}

		// Fix multi input exploit
		deBug();

		char sel = 0;
		system("cls");
		showMenu();
		cout << "Please make a selection: ";
		cin >> sel;
		int asciiCheck = sel+0;

		// NUMBERS SANITATION CHECK V9000!
		if (asciiCheck < 48 || asciiCheck > 57) {
			attemptsToGlitch++;
			if (attemptsToGlitch > 2) {
				attemptsToGlitch = 0;
				// Do secret surprise #2
				sekrit2(renderer);
			} else {
				cout << "Invalid Choice" << endl << endl;
				system("pause");
				continue;
			}
		}

		// Ok now let's switchit.
		switch (asciiCheck) {
		case 48:
			// #0
			// secret surprise #1 (kappy easter egg #1)
			// Fix multi input exploit
			deBug();
			sekritSurprise(renderer);
			break;
		case 49:
			// #1
			// run bouncy letters function.
			system("cls");
			// Fix multi input exploit
			deBug();
			bouncingLetters(renderer);
			break;
		case 50:
			// #2
			// run scroll left/right/down/up function.
			system("cls");
			// Fix multi input exploit
			deBug();
			scrollEverywhere(renderer);
			break;
		case 51:
			// #3
			// run tests
			system("cls");
			// Fix multi input exploit
			deBug();
			testing(renderer);
			break;
		case 52:
			// #4
			// run options function
			system("cls");
			// Fix multi input exploit
			deBug();
			renderer = options(renderer);
			break;
		case 53:
			// #5
			// run exit
			sappiku = true;
			break;
		default:
			attemptsToGlitch++;
			if (attemptsToGlitch > 2) {
				attemptsToGlitch = 0;
				// Do secret surprise #2
				sekrit2(renderer);
			} else {
				cout << "Invalid Choice" << endl << endl;
				system("pause");
				continue;
			}
		}

	} while(true);

	return 0; // exit code.
}

void runTheShow(Renderer renderer)
{
	// "ID Programming Academy Presents"
	// Another renderer is required because it lags with borders on.
	Renderer renderer2(20, 42);
	renderer2.showBorders = false;
	renderer2.showDots = false;
	renderer2.renderScroll(createIDPAPresents());

	renderer.renderScroll(createAwesomeEffect());
	renderer.renderScreenDown(5, 'X', true);
	renderer.renderScreenDown(5, 'X', false);
	renderer.renderScreenLeft(5, 'X', true);
	renderer.renderScreenLeft(5, 'X', false);
}

void showMenu()
{
	Renderer renderer(20, 44);
	renderer.showDots = false;
	std::vector<string> test;
	test.push_back("The (Console) ASCII Animation Project");
	test.push_back("The most dangerous program ever.");
	test.push_back("Created by yours truly, Joe K.");
	test.push_back("");
	test.push_back("");
	test.push_back("");
	test.push_back("Please make a selection:");
	test.push_back("");
	test.push_back("1. Bouncing Letters");
	test.push_back("2. Scroll Left/Right/Down/Up");
	test.push_back("3. Tests"); 
	test.push_back("4. Options");
	test.push_back("5. Exit");
	renderer.renderText(test, 4, 4);
}

void bouncingLetters(Renderer renderer)
{
	// Render bouncy letters.
	std::vector<GPoint> bouncymsgs;

	string msg;
	cout << "Please enter a message here: ";
	cin >> msg;
	if (msg == "kappy") {
		kappehSurprise(renderer);
		return;
	}
	int index = 0;
	int x = 1;
	for (string::iterator it = msg.begin() ; it != msg.end(); it++ , index++) // <---- what?
	{
		// *it
		if (x == 4)
		{
			x = 1;
		}
		GPoint g(1, x, *it);
		g.move = rand() % 2;
		bouncymsgs.push_back(g);
		x++;
	}
	renderer.renderBounce(bouncymsgs);
}

void scrollEverywhere(Renderer renderer)
{
	char dir;
	cout << "Please enter a direction (1 = down, 2 = up, 3 = left, 4 = right): " << endl;
	cin >> dir;
	int asciiCheckDir = dir+0;
	if (asciiCheckDir < 49 || asciiCheckDir > 52) {
		return;
	}
	
	// Fix multi input exploit
	deBug();
	char objsC;
	cout << "Please enter an amount of rows to create (5): " << endl;
	cin >> objsC;
	int asciiCheckObjs = objsC+0;
	if (asciiCheckObjs < 49 || asciiCheckObjs > 57) {
		return;
	}
	int objs = asciiCheckObjs - 48;
	if (objs < 1 || objs > 20) {
		return;
	}


	// Fix multi input exploit
	deBug();
	char character;
	cout << "Please enter a character (#): " << endl;
	cin >> character;

	switch (asciiCheckDir) {
	case 49:
		// down
		renderer.renderScreenDown(objs, character, false);
		system("pause");
		break;
	case 50:
		// up
		renderer.renderScreenDown(objs, character, true);
		system("pause");
		break;
	case 51:
		// left
		renderer.renderScreenLeft(objs, character, false);
		system("pause");
		break;
	case 52:
		// right
		renderer.renderScreenLeft(objs, character, true);
		system("pause");
		break;
	}
}

void testing(Renderer renderer)
{
	cout << "Now running tests." << endl;
	system("pause");
	system("cls");

	for (int i = 0; i < 20; i++) {
		system("cls");
		renderer.blankRender();
	}

	system("cls");
	renderer.render(renderer.createRandomAnimation());

	system("pause");
}

Renderer options(Renderer renderer22)
{
	Renderer renderer2 = renderer22;
	bool breake = false;
	do {
		if (breake) {
			break;
		}
		// Fix multi input exploit
		deBug();

		Renderer renderer(20, 44);
		renderer.showDots = false;
		char sel = 0;
		int rows = renderer2.rows, columns = renderer2.columns;
		string toggleBorders = (renderer2.showBorders ? " off" : " on"), toggleDots = (renderer2.showDots ? " off" : " on");
		std::vector<string> test;
		test.push_back("The (Console) ASCII Animation Project");
		test.push_back("The most dangerous program ever.");
		test.push_back("Created by yours truly, Joe K.");
		test.push_back("");
		test.push_back("");
		test.push_back("");
		test.push_back("Options Menu:");
		test.push_back("");
		test.push_back("1. Set # of Rows and Columns.");
		test.push_back("2. Turn" + toggleBorders + " borders");
		test.push_back("3. Turn" + toggleDots + " dots");
		test.push_back("4. Back");
		renderer.renderText(test, 4, 4);

		cout << "Please make a selection: ";
		cin >> sel;
		int asciiCheck = sel+0;

		// NUMBERS SANITATION CHECK V9000!
		if (asciiCheck < 48 || asciiCheck > 57) {
			cout << "Invalid Choice" << endl << endl;
			system("pause");
			continue;
		}

		// Ok now let's switchit.
		switch (asciiCheck) {
		case 49:
			// #1
			system("cls");

			// Fix multi input exploit
			deBug();

			int rows;
			cout << "Please enter # of Rows: " << endl;
			cin >> rows;
			rows += 2; // OFFSET!
			if (rows > 32) {
				cout << "You've reached the maximum # of rows! :(" << endl;
				system("pause");
				continue;
			} else if (rows < 1) {
				if (rows == 0) {
					rows--;
				}
				rows = (rows * -1 + 2 > 32 ? 32 : rows * -1 + 2);
			}

			renderer2.rows = rows;

			int columns;
			cout << "Please enter # of Columns: " << endl;
			cin >> columns;
			columns += 2; // OFFSET!
			if (columns > 62) {
				cout << "You've reached the maximum # of columns! :(" << endl;
				system("pause");
				continue;
			} else if (columns < 1) {
				if (columns == 0) {
					columns--;
				}
				columns = columns * -1;
			}

			renderer2.columns = columns;
			break;
		case 50:
			// #2
			// Fix multi input exploit
			deBug();
			renderer2.showBorders = !renderer2.showBorders;
			break;
		case 51:
			// #3
			// Fix multi input exploit
			deBug();
			renderer2.showDots = !renderer2.showDots;
			break;
		case 52:
			// #4
			// Fix multi input exploit
			deBug();
			breake = true;
			break;
		default:
			cout << "Invalid Choice" << endl << endl;
			system("pause");
			break;
		}
	} while(true);

	return renderer2;
}


// These come last, so they don't see them.

void kappehSurprise(Renderer renderer)
{
	renderer.renderWat(true);
}

void sekrit2(Renderer renderer)
{
	renderer.renderWat(false);
}

void sekritSurprise(Renderer renderer)
{
	int nsx = 4, nsy = 40;
	int size = 218;
	int *x = new int[size];
	int *y = new int[size];
	x[0] = 0;
	y[0] = 0;
	x[1] = 0;
	y[1] = 1;
	x[2] = 0;
	y[2] = 2;
	x[3] = 0;
	y[3] = 3;
	x[4] = 0;
	y[4] = 4;
	x[5] = 0;
	y[5] = 5;
	x[6] = 0;
	y[6] = 6;
	x[7] = 0;
	y[7] = 7;
	x[8] = 0;
	y[8] = 8;
	x[9] = 0;
	y[9] = 9;
	x[10] = 0;
	y[10] = 10;
	x[11] = 0;
	y[11] = 11;
	x[12] = 0;
	y[12] = 12;
	x[13] = 0;
	y[13] = 13;
	x[14] = 0;
	y[14] = 14;
	x[15] = 0;
	y[15] = 15;
	x[16] = 0;
	y[16] = 16;
	x[17] = 0;
	y[17] = 17;
	x[18] = 0;
	y[18] = 18;
	x[19] = 0;
	y[19] = 19;
	x[20] = 0;
	y[20] = 20;
	x[21] = 0;
	y[21] = 21;
	x[22] = 0;
	y[22] = 22;
	x[23] = 0;
	y[23] = 23;
	x[24] = 0;
	y[24] = 24;
	x[25] = 0;
	y[25] = 25;
	x[26] = 0;
	y[26] = 26;
	x[27] = 0;
	y[27] = 27;
	x[28] = 0;
	y[28] = 28;
	x[29] = 0;
	y[29] = 29;
	x[30] = 0;
	y[30] = 30;
	x[31] = 0;
	y[31] = 31;
	x[32] = 0;
	y[32] = 32;
	x[33] = 0;
	y[33] = 33;
	x[34] = 0;
	y[34] = 34;
	x[35] = 0;
	y[35] = 35;
	x[36] = 0;
	y[36] = 36;
	x[37] = 0;
	y[37] = 37;
	x[38] = 0;
	y[38] = 38;
	x[39] = 0;
	y[39] = 39;
	x[40] = 0;
	y[40] = 40;
	x[41] = 0;
	y[41] = 41;
	x[42] = 0;
	y[42] = 42;
	x[43] = 0;
	y[43] = 43;
	x[44] = 0;
	y[44] = 44;
	x[45] = 0;
	y[45] = 45;
	x[46] = 0;
	y[46] = 46;
	x[47] = 0;
	y[47] = 47;
	x[48] = 0;
	y[48] = 48;
	x[49] = 0;
	y[49] = 49;
	x[50] = 0;
	y[50] = 50;
	x[51] = 0;
	y[51] = 51;
	x[52] = 0;
	y[52] = 52;
	x[53] = 0;
	y[53] = 53;
	x[54] = 0;
	y[54] = 54;
	x[55] = 0;
	y[55] = 55;
	x[56] = 0;
	y[56] = 56;
	x[57] = 0;
	y[57] = 57;
	x[58] = 0;
	y[58] = 58;
	x[59] = 0;
	y[59] = 59;
	x[60] = 0;
	y[60] = 60;
	x[61] = 0;
	y[61] = 61;
	x[62] = 0;
	y[62] = 62;
	x[63] = 0;
	y[63] = 63;
	x[64] = 1;
	y[64] = 0;
	x[65] = 1;
	y[65] = 5;
	x[66] = 1;
	y[66] = 8;
	x[67] = 1;
	y[67] = 12;
	x[68] = 1;
	y[68] = 14;
	x[69] = 1;
	y[69] = 17;
	x[70] = 1;
	y[70] = 20;
	x[71] = 1;
	y[71] = 21;
	x[72] = 1;
	y[72] = 22;
	x[73] = 1;
	y[73] = 29;
	x[74] = 1;
	y[74] = 32;
	x[75] = 1;
	y[75] = 33;
	x[76] = 1;
	y[76] = 36;
	x[77] = 1;
	y[77] = 37;
	x[78] = 1;
	y[78] = 38;
	x[79] = 1;
	y[79] = 44;
	x[80] = 1;
	y[80] = 46;
	x[81] = 1;
	y[81] = 49;
	x[82] = 1;
	y[82] = 52;
	x[83] = 1;
	y[83] = 54;
	x[84] = 2;
	y[84] = 0;
	x[85] = 2;
	y[85] = 4;
	x[86] = 2;
	y[86] = 6;
	x[87] = 2;
	y[87] = 8;
	x[88] = 2;
	y[88] = 12;
	x[89] = 2;
	y[89] = 14;
	x[90] = 2;
	y[90] = 16;
	x[91] = 2;
	y[91] = 18;
	x[92] = 2;
	y[92] = 21;
	x[93] = 2;
	y[93] = 28;
	x[94] = 2;
	y[94] = 30;
	x[95] = 2;
	y[95] = 32;
	x[96] = 2;
	y[96] = 34;
	x[97] = 2;
	y[97] = 36;
	x[98] = 2;
	y[98] = 44;
	x[99] = 2;
	y[99] = 46;
	x[100] = 2;
	y[100] = 48;
	x[101] = 2;
	y[101] = 50;
	x[102] = 2;
	y[102] = 52;
	x[103] = 2;
	y[103] = 54;
	x[104] = 3;
	y[104] = 0;
	x[105] = 3;
	y[105] = 4;
	x[106] = 3;
	y[106] = 6;
	x[107] = 3;
	y[107] = 8;
	x[108] = 3;
	y[108] = 12;
	x[109] = 3;
	y[109] = 13;
	x[110] = 3;
	y[110] = 14;
	x[111] = 3;
	y[111] = 16;
	x[112] = 3;
	y[112] = 17;
	x[113] = 3;
	y[113] = 18;
	x[114] = 3;
	y[114] = 21;
	x[115] = 3;
	y[115] = 28;
	x[116] = 3;
	y[116] = 29;
	x[117] = 3;
	y[117] = 30;
	x[118] = 3;
	y[118] = 32;
	x[119] = 3;
	y[119] = 33;
	x[120] = 3;
	y[120] = 36;
	x[121] = 3;
	y[121] = 37;
	x[122] = 3;
	y[122] = 45;
	x[123] = 3;
	y[123] = 48;
	x[124] = 3;
	y[124] = 50;
	x[125] = 3;
	y[125] = 52;
	x[126] = 3;
	y[126] = 54;
	x[127] = 4;
	y[127] = 0;
	x[128] = 4;
	y[128] = 4;
	x[129] = 4;
	y[129] = 6;
	x[130] = 4;
	y[130] = 8;
	x[131] = 4;
	y[131] = 12;
	x[132] = 4;
	y[132] = 13;
	x[133] = 4;
	y[133] = 14;
	x[134] = 4;
	y[134] = 16;
	x[135] = 4;
	y[135] = 18;
	x[136] = 4;
	y[136] = 21;
	x[137] = 4;
	y[137] = 28;
	x[138] = 4;
	y[138] = 30;
	x[139] = 4;
	y[139] = 32;
	x[140] = 4;
	y[140] = 34;
	x[141] = 4;
	y[141] = 36;
	x[142] = 4;
	y[142] = 45;
	x[143] = 4;
	y[143] = 48;
	x[144] = 4;
	y[144] = 50;
	x[145] = 4;
	y[145] = 52;
	x[146] = 4;
	y[146] = 54;
	x[147] = 5;
	y[147] = 0;
	x[148] = 5;
	y[148] = 1;
	x[149] = 5;
	y[149] = 2;
	x[150] = 5;
	y[150] = 5;
	x[151] = 5;
	y[151] = 8;
	x[152] = 5;
	y[152] = 9;
	x[153] = 5;
	y[153] = 10;
	x[154] = 5;
	y[154] = 12;
	x[155] = 5;
	y[155] = 14;
	x[156] = 5;
	y[156] = 16;
	x[157] = 5;
	y[157] = 18;
	x[158] = 5;
	y[158] = 21;
	x[159] = 5;
	y[159] = 28;
	x[160] = 5;
	y[160] = 30;
	x[161] = 5;
	y[161] = 32;
	x[162] = 5;
	y[162] = 34;
	x[163] = 5;
	y[163] = 36;
	x[164] = 5;
	y[164] = 37;
	x[165] = 5;
	y[165] = 38;
	x[166] = 5;
	y[166] = 45;
	x[167] = 5;
	y[167] = 49;
	x[168] = 5;
	y[168] = 52;
	x[169] = 5;
	y[169] = 53;
	x[170] = 5;
	y[170] = 54;
	x[171] = 7;
	y[171] = 0;
	x[172] = 7;
	y[172] = 1;
	x[173] = 7;
	y[173] = 5;
	x[174] = 7;
	y[174] = 8;
	x[175] = 7;
	y[175] = 9;
	x[176] = 7;
	y[176] = 10;
	x[177] = 7;
	y[177] = 12;
	x[178] = 7;
	y[178] = 13;
	x[179] = 7;
	y[179] = 14;
	x[180] = 7;
	y[180] = 17;
	x[181] = 7;
	y[181] = 18;
	x[182] = 8;
	y[182] = 0;
	x[183] = 8;
	y[183] = 2;
	x[184] = 8;
	y[184] = 4;
	x[185] = 8;
	y[185] = 6;
	x[186] = 8;
	y[186] = 9;
	x[187] = 8;
	y[187] = 12;
	x[188] = 8;
	y[188] = 14;
	x[189] = 8;
	y[189] = 16;
	x[190] = 9;
	y[190] = 0;
	x[191] = 9;
	y[191] = 2;
	x[192] = 9;
	y[192] = 4;
	x[193] = 9;
	y[193] = 6;
	x[194] = 9;
	y[194] = 9;
	x[195] = 9;
	y[195] = 12;
	x[196] = 9;
	y[196] = 14;
	x[197] = 9;
	y[197] = 16;
	x[198] = 9;
	y[198] = 18;
	x[199] = 10;
	y[199] = 0;
	x[200] = 10;
	y[200] = 2;
	x[201] = 10;
	y[201] = 4;
	x[202] = 10;
	y[202] = 6;
	x[203] = 10;
	y[203] = 9;
	x[204] = 10;
	y[204] = 12;
	x[205] = 10;
	y[205] = 14;
	x[206] = 10;
	y[206] = 16;
	x[207] = 10;
	y[207] = 18;
	x[208] = 11;
	y[208] = 0;
	x[209] = 11;
	y[209] = 1;
	x[210] = 11;
	y[210] = 5;
	x[211] = 11;
	y[211] = 8;
	x[212] = 11;
	y[212] = 9;
	x[213] = 11;
	y[213] = 10;
	x[214] = 11;
	y[214] = 12;
	x[215] = 11;
	y[215] = 14;
	x[216] = 11;
	y[216] = 17;
	x[217] = 11;
	y[217] = 18;


	AbstractPoint a(nsx,nsy,x,y,size,'#');
	for (int i = 0; i < 2; i++) {
		renderer.renderScroll(a);
	}

	while(true) {
		renderer.renderScroll(a);
		renderer.renderScreenDown(10, 'L', false);
	}
}

AbstractPoint createIDPAPresents()
{
	int nsx = 4, nsy = 40;
	int size = 327;
	int *x = new int[size];
	int *y = new int[size];
	x[0] = 0;
	y[0] = 0;
	x[1] = 0;
	y[1] = 1;
	x[2] = 0;
	y[2] = 2;
	x[3] = 0;
	y[3] = 3;
	x[4] = 0;
	y[4] = 4;
	x[5] = 0;
	y[5] = 5;
	x[6] = 0;
	y[6] = 6;
	x[7] = 0;
	y[7] = 7;
	x[8] = 0;
	y[8] = 8;
	x[9] = 0;
	y[9] = 9;
	x[10] = 0;
	y[10] = 10;
	x[11] = 0;
	y[11] = 11;
	x[12] = 0;
	y[12] = 12;
	x[13] = 0;
	y[13] = 13;
	x[14] = 0;
	y[14] = 14;
	x[15] = 0;
	y[15] = 15;
	x[16] = 0;
	y[16] = 16;
	x[17] = 0;
	y[17] = 17;
	x[18] = 0;
	y[18] = 18;
	x[19] = 0;
	y[19] = 19;
	x[20] = 0;
	y[20] = 20;
	x[21] = 0;
	y[21] = 21;
	x[22] = 0;
	y[22] = 22;
	x[23] = 0;
	y[23] = 23;
	x[24] = 0;
	y[24] = 24;
	x[25] = 0;
	y[25] = 25;
	x[26] = 0;
	y[26] = 26;
	x[27] = 0;
	y[27] = 27;
	x[28] = 0;
	y[28] = 28;
	x[29] = 0;
	y[29] = 29;
	x[30] = 0;
	y[30] = 30;
	x[31] = 0;
	y[31] = 31;
	x[32] = 0;
	y[32] = 32;
	x[33] = 0;
	y[33] = 33;
	x[34] = 0;
	y[34] = 34;
	x[35] = 0;
	y[35] = 35;
	x[36] = 0;
	y[36] = 36;
	x[37] = 0;
	y[37] = 37;
	x[38] = 0;
	y[38] = 38;
	x[39] = 0;
	y[39] = 39;
	x[40] = 0;
	y[40] = 40;
	x[41] = 0;
	y[41] = 41;
	x[42] = 0;
	y[42] = 42;
	x[43] = 0;
	y[43] = 43;
	x[44] = 0;
	y[44] = 44;
	x[45] = 0;
	y[45] = 45;
	x[46] = 0;
	y[46] = 46;
	x[47] = 0;
	y[47] = 47;
	x[48] = 0;
	y[48] = 48;
	x[49] = 0;
	y[49] = 49;
	x[50] = 0;
	y[50] = 50;
	x[51] = 0;
	y[51] = 51;
	x[52] = 0;
	y[52] = 52;
	x[53] = 0;
	y[53] = 53;
	x[54] = 0;
	y[54] = 54;
	x[55] = 0;
	y[55] = 55;
	x[56] = 0;
	y[56] = 56;
	x[57] = 0;
	y[57] = 57;
	x[58] = 0;
	y[58] = 58;
	x[59] = 0;
	y[59] = 59;
	x[60] = 0;
	y[60] = 60;
	x[61] = 0;
	y[61] = 61;
	x[62] = 0;
	y[62] = 62;
	x[63] = 0;
	y[63] = 63;
	x[64] = 1;
	y[64] = 0;
	x[65] = 1;
	y[65] = 1;
	x[66] = 1;
	y[66] = 2;
	x[67] = 1;
	y[67] = 4;
	x[68] = 1;
	y[68] = 5;
	x[69] = 1;
	y[69] = 12;
	x[70] = 1;
	y[70] = 13;
	x[71] = 1;
	y[71] = 16;
	x[72] = 1;
	y[72] = 17;
	x[73] = 1;
	y[73] = 21;
	x[74] = 1;
	y[74] = 25;
	x[75] = 1;
	y[75] = 26;
	x[76] = 1;
	y[76] = 28;
	x[77] = 1;
	y[77] = 29;
	x[78] = 1;
	y[78] = 33;
	x[79] = 1;
	y[79] = 36;
	x[80] = 1;
	y[80] = 38;
	x[81] = 1;
	y[81] = 40;
	x[82] = 1;
	y[82] = 42;
	x[83] = 1;
	y[83] = 44;
	x[84] = 1;
	y[84] = 45;
	x[85] = 1;
	y[85] = 46;
	x[86] = 1;
	y[86] = 48;
	x[87] = 1;
	y[87] = 49;
	x[88] = 1;
	y[88] = 50;
	x[89] = 1;
	y[89] = 53;
	x[90] = 1;
	y[90] = 54;
	x[91] = 2;
	y[91] = 1;
	x[92] = 2;
	y[92] = 4;
	x[93] = 2;
	y[93] = 6;
	x[94] = 2;
	y[94] = 12;
	x[95] = 2;
	y[95] = 14;
	x[96] = 2;
	y[96] = 16;
	x[97] = 2;
	y[97] = 18;
	x[98] = 2;
	y[98] = 20;
	x[99] = 2;
	y[99] = 22;
	x[100] = 2;
	y[100] = 24;
	x[101] = 2;
	y[101] = 28;
	x[102] = 2;
	y[102] = 30;
	x[103] = 2;
	y[103] = 32;
	x[104] = 2;
	y[104] = 34;
	x[105] = 2;
	y[105] = 36;
	x[106] = 2;
	y[106] = 37;
	x[107] = 2;
	y[107] = 38;
	x[108] = 2;
	y[108] = 40;
	x[109] = 2;
	y[109] = 41;
	x[110] = 2;
	y[110] = 42;
	x[111] = 2;
	y[111] = 45;
	x[112] = 2;
	y[112] = 48;
	x[113] = 2;
	y[113] = 50;
	x[114] = 2;
	y[114] = 52;
	x[115] = 3;
	y[115] = 1;
	x[116] = 3;
	y[116] = 4;
	x[117] = 3;
	y[117] = 6;
	x[118] = 3;
	y[118] = 12;
	x[119] = 3;
	y[119] = 13;
	x[120] = 3;
	y[120] = 16;
	x[121] = 3;
	y[121] = 17;
	x[122] = 3;
	y[122] = 20;
	x[123] = 3;
	y[123] = 22;
	x[124] = 3;
	y[124] = 24;
	x[125] = 3;
	y[125] = 26;
	x[126] = 3;
	y[126] = 28;
	x[127] = 3;
	y[127] = 29;
	x[128] = 3;
	y[128] = 32;
	x[129] = 3;
	y[129] = 33;
	x[130] = 3;
	y[130] = 34;
	x[131] = 3;
	y[131] = 36;
	x[132] = 3;
	y[132] = 37;
	x[133] = 3;
	y[133] = 38;
	x[134] = 3;
	y[134] = 40;
	x[135] = 3;
	y[135] = 41;
	x[136] = 3;
	y[136] = 42;
	x[137] = 3;
	y[137] = 45;
	x[138] = 3;
	y[138] = 48;
	x[139] = 3;
	y[139] = 50;
	x[140] = 3;
	y[140] = 52;
	x[141] = 3;
	y[141] = 54;
	x[142] = 4;
	y[142] = 1;
	x[143] = 4;
	y[143] = 4;
	x[144] = 4;
	y[144] = 6;
	x[145] = 4;
	y[145] = 12;
	x[146] = 4;
	y[146] = 16;
	x[147] = 4;
	y[147] = 18;
	x[148] = 4;
	y[148] = 20;
	x[149] = 4;
	y[149] = 22;
	x[150] = 4;
	y[150] = 24;
	x[151] = 4;
	y[151] = 26;
	x[152] = 4;
	y[152] = 28;
	x[153] = 4;
	y[153] = 30;
	x[154] = 4;
	y[154] = 32;
	x[155] = 4;
	y[155] = 34;
	x[156] = 4;
	y[156] = 36;
	x[157] = 4;
	y[157] = 38;
	x[158] = 4;
	y[158] = 40;
	x[159] = 4;
	y[159] = 42;
	x[160] = 4;
	y[160] = 45;
	x[161] = 4;
	y[161] = 48;
	x[162] = 4;
	y[162] = 50;
	x[163] = 4;
	y[163] = 52;
	x[164] = 4;
	y[164] = 54;
	x[165] = 5;
	y[165] = 0;
	x[166] = 5;
	y[166] = 1;
	x[167] = 5;
	y[167] = 2;
	x[168] = 5;
	y[168] = 4;
	x[169] = 5;
	y[169] = 5;
	x[170] = 5;
	y[170] = 12;
	x[171] = 5;
	y[171] = 16;
	x[172] = 5;
	y[172] = 18;
	x[173] = 5;
	y[173] = 21;
	x[174] = 5;
	y[174] = 25;
	x[175] = 5;
	y[175] = 26;
	x[176] = 5;
	y[176] = 28;
	x[177] = 5;
	y[177] = 30;
	x[178] = 5;
	y[178] = 32;
	x[179] = 5;
	y[179] = 34;
	x[180] = 5;
	y[180] = 36;
	x[181] = 5;
	y[181] = 38;
	x[182] = 5;
	y[182] = 40;
	x[183] = 5;
	y[183] = 42;
	x[184] = 5;
	y[184] = 44;
	x[185] = 5;
	y[185] = 45;
	x[186] = 5;
	y[186] = 46;
	x[187] = 5;
	y[187] = 48;
	x[188] = 5;
	y[188] = 50;
	x[189] = 5;
	y[189] = 53;
	x[190] = 5;
	y[190] = 54;
	x[191] = 7;
	y[191] = 1;
	x[192] = 7;
	y[192] = 5;
	x[193] = 7;
	y[193] = 6;
	x[194] = 7;
	y[194] = 9;
	x[195] = 7;
	y[195] = 12;
	x[196] = 7;
	y[196] = 13;
	x[197] = 7;
	y[197] = 16;
	x[198] = 7;
	y[198] = 17;
	x[199] = 7;
	y[199] = 18;
	x[200] = 7;
	y[200] = 20;
	x[201] = 7;
	y[201] = 22;
	x[202] = 7;
	y[202] = 24;
	x[203] = 7;
	y[203] = 26;
	x[204] = 7;
	y[204] = 32;
	x[205] = 7;
	y[205] = 33;
	x[206] = 7;
	y[206] = 36;
	x[207] = 7;
	y[207] = 37;
	x[208] = 7;
	y[208] = 40;
	x[209] = 7;
	y[209] = 41;
	x[210] = 7;
	y[210] = 42;
	x[211] = 7;
	y[211] = 45;
	x[212] = 7;
	y[212] = 46;
	x[213] = 7;
	y[213] = 48;
	x[214] = 7;
	y[214] = 49;
	x[215] = 7;
	y[215] = 50;
	x[216] = 7;
	y[216] = 52;
	x[217] = 7;
	y[217] = 53;
	x[218] = 7;
	y[218] = 54;
	x[219] = 7;
	y[219] = 56;
	x[220] = 7;
	y[220] = 57;
	x[221] = 7;
	y[221] = 58;
	x[222] = 7;
	y[222] = 61;
	x[223] = 7;
	y[223] = 62;
	x[224] = 8;
	y[224] = 0;
	x[225] = 8;
	y[225] = 2;
	x[226] = 8;
	y[226] = 4;
	x[227] = 8;
	y[227] = 8;
	x[228] = 8;
	y[228] = 10;
	x[229] = 8;
	y[229] = 12;
	x[230] = 8;
	y[230] = 14;
	x[231] = 8;
	y[231] = 16;
	x[232] = 8;
	y[232] = 20;
	x[233] = 8;
	y[233] = 21;
	x[234] = 8;
	y[234] = 22;
	x[235] = 8;
	y[235] = 24;
	x[236] = 8;
	y[236] = 26;
	x[237] = 8;
	y[237] = 32;
	x[238] = 8;
	y[238] = 34;
	x[239] = 8;
	y[239] = 36;
	x[240] = 8;
	y[240] = 38;
	x[241] = 8;
	y[241] = 40;
	x[242] = 8;
	y[242] = 44;
	x[243] = 8;
	y[243] = 48;
	x[244] = 8;
	y[244] = 52;
	x[245] = 8;
	y[245] = 54;
	x[246] = 8;
	y[246] = 57;
	x[247] = 8;
	y[247] = 60;
	x[248] = 9;
	y[248] = 0;
	x[249] = 9;
	y[249] = 1;
	x[250] = 9;
	y[250] = 2;
	x[251] = 9;
	y[251] = 4;
	x[252] = 9;
	y[252] = 8;
	x[253] = 9;
	y[253] = 9;
	x[254] = 9;
	y[254] = 10;
	x[255] = 9;
	y[255] = 12;
	x[256] = 9;
	y[256] = 14;
	x[257] = 9;
	y[257] = 16;
	x[258] = 9;
	y[258] = 17;
	x[259] = 9;
	y[259] = 20;
	x[260] = 9;
	y[260] = 21;
	x[261] = 9;
	y[261] = 22;
	x[262] = 9;
	y[262] = 25;
	x[263] = 9;
	y[263] = 32;
	x[264] = 9;
	y[264] = 33;
	x[265] = 9;
	y[265] = 36;
	x[266] = 9;
	y[266] = 37;
	x[267] = 9;
	y[267] = 40;
	x[268] = 9;
	y[268] = 41;
	x[269] = 9;
	y[269] = 45;
	x[270] = 9;
	y[270] = 48;
	x[271] = 9;
	y[271] = 49;
	x[272] = 9;
	y[272] = 52;
	x[273] = 9;
	y[273] = 54;
	x[274] = 9;
	y[274] = 57;
	x[275] = 9;
	y[275] = 61;
	x[276] = 10;
	y[276] = 0;
	x[277] = 10;
	y[277] = 2;
	x[278] = 10;
	y[278] = 4;
	x[279] = 10;
	y[279] = 8;
	x[280] = 10;
	y[280] = 10;
	x[281] = 10;
	y[281] = 12;
	x[282] = 10;
	y[282] = 14;
	x[283] = 10;
	y[283] = 16;
	x[284] = 10;
	y[284] = 20;
	x[285] = 10;
	y[285] = 22;
	x[286] = 10;
	y[286] = 25;
	x[287] = 10;
	y[287] = 32;
	x[288] = 10;
	y[288] = 36;
	x[289] = 10;
	y[289] = 38;
	x[290] = 10;
	y[290] = 40;
	x[291] = 10;
	y[291] = 46;
	x[292] = 10;
	y[292] = 48;
	x[293] = 10;
	y[293] = 52;
	x[294] = 10;
	y[294] = 54;
	x[295] = 10;
	y[295] = 57;
	x[296] = 10;
	y[296] = 62;
	x[297] = 11;
	y[297] = 0;
	x[298] = 11;
	y[298] = 2;
	x[299] = 11;
	y[299] = 5;
	x[300] = 11;
	y[300] = 6;
	x[301] = 11;
	y[301] = 8;
	x[302] = 11;
	y[302] = 10;
	x[303] = 11;
	y[303] = 12;
	x[304] = 11;
	y[304] = 13;
	x[305] = 11;
	y[305] = 16;
	x[306] = 11;
	y[306] = 17;
	x[307] = 11;
	y[307] = 18;
	x[308] = 11;
	y[308] = 20;
	x[309] = 11;
	y[309] = 22;
	x[310] = 11;
	y[310] = 25;
	x[311] = 11;
	y[311] = 32;
	x[312] = 11;
	y[312] = 36;
	x[313] = 11;
	y[313] = 38;
	x[314] = 11;
	y[314] = 40;
	x[315] = 11;
	y[315] = 41;
	x[316] = 11;
	y[316] = 42;
	x[317] = 11;
	y[317] = 44;
	x[318] = 11;
	y[318] = 45;
	x[319] = 11;
	y[319] = 48;
	x[320] = 11;
	y[320] = 49;
	x[321] = 11;
	y[321] = 50;
	x[322] = 11;
	y[322] = 52;
	x[323] = 11;
	y[323] = 54;
	x[324] = 11;
	y[324] = 57;
	x[325] = 11;
	y[325] = 60;
	x[326] = 11;
	y[326] = 61;

	AbstractPoint a(nsx,nsy,x,y,size,'#');
	return a;
}

AbstractPoint createAwesomeEffect()
{
	int nsx = 4, nsy = 40;
	int size = 356;
	int *x = new int[size];
	int *y = new int[size];
	x[0] = 0;
	y[0] = 0;
	x[1] = 0;
	y[1] = 1;
	x[2] = 0;
	y[2] = 2;
	x[3] = 0;
	y[3] = 3;
	x[4] = 0;
	y[4] = 4;
	x[5] = 0;
	y[5] = 5;
	x[6] = 0;
	y[6] = 6;
	x[7] = 0;
	y[7] = 7;
	x[8] = 0;
	y[8] = 8;
	x[9] = 0;
	y[9] = 9;
	x[10] = 0;
	y[10] = 10;
	x[11] = 0;
	y[11] = 11;
	x[12] = 0;
	y[12] = 12;
	x[13] = 0;
	y[13] = 13;
	x[14] = 0;
	y[14] = 14;
	x[15] = 0;
	y[15] = 15;
	x[16] = 0;
	y[16] = 16;
	x[17] = 0;
	y[17] = 17;
	x[18] = 0;
	y[18] = 18;
	x[19] = 0;
	y[19] = 19;
	x[20] = 0;
	y[20] = 20;
	x[21] = 0;
	y[21] = 21;
	x[22] = 0;
	y[22] = 22;
	x[23] = 0;
	y[23] = 23;
	x[24] = 0;
	y[24] = 24;
	x[25] = 0;
	y[25] = 25;
	x[26] = 0;
	y[26] = 26;
	x[27] = 0;
	y[27] = 27;
	x[28] = 0;
	y[28] = 28;
	x[29] = 0;
	y[29] = 29;
	x[30] = 0;
	y[30] = 30;
	x[31] = 0;
	y[31] = 31;
	x[32] = 0;
	y[32] = 32;
	x[33] = 0;
	y[33] = 33;
	x[34] = 0;
	y[34] = 34;
	x[35] = 0;
	y[35] = 35;
	x[36] = 0;
	y[36] = 36;
	x[37] = 0;
	y[37] = 37;
	x[38] = 0;
	y[38] = 38;
	x[39] = 0;
	y[39] = 39;
	x[40] = 0;
	y[40] = 40;
	x[41] = 0;
	y[41] = 41;
	x[42] = 0;
	y[42] = 42;
	x[43] = 0;
	y[43] = 43;
	x[44] = 0;
	y[44] = 44;
	x[45] = 0;
	y[45] = 45;
	x[46] = 0;
	y[46] = 46;
	x[47] = 0;
	y[47] = 47;
	x[48] = 0;
	y[48] = 48;
	x[49] = 0;
	y[49] = 49;
	x[50] = 0;
	y[50] = 50;
	x[51] = 0;
	y[51] = 51;
	x[52] = 0;
	y[52] = 52;
	x[53] = 0;
	y[53] = 53;
	x[54] = 0;
	y[54] = 54;
	x[55] = 0;
	y[55] = 55;
	x[56] = 0;
	y[56] = 56;
	x[57] = 0;
	y[57] = 57;
	x[58] = 0;
	y[58] = 58;
	x[59] = 0;
	y[59] = 59;
	x[60] = 0;
	y[60] = 60;
	x[61] = 0;
	y[61] = 61;
	x[62] = 0;
	y[62] = 62;
	x[63] = 0;
	y[63] = 63;
	x[64] = 0;
	y[64] = 64;
	x[65] = 0;
	y[65] = 65;
	x[66] = 0;
	y[66] = 66;
	x[67] = 0;
	y[67] = 67;
	x[68] = 0;
	y[68] = 68;
	x[69] = 0;
	y[69] = 69;
	x[70] = 0;
	y[70] = 70;
	x[71] = 0;
	y[71] = 71;
	x[72] = 0;
	y[72] = 72;
	x[73] = 0;
	y[73] = 73;
	x[74] = 0;
	y[74] = 74;
	x[75] = 0;
	y[75] = 75;
	x[76] = 0;
	y[76] = 76;
	x[77] = 0;
	y[77] = 77;
	x[78] = 0;
	y[78] = 78;
	x[79] = 0;
	y[79] = 79;
	x[80] = 0;
	y[80] = 80;
	x[81] = 0;
	y[81] = 81;
	x[82] = 0;
	y[82] = 82;
	x[83] = 0;
	y[83] = 83;
	x[84] = 0;
	y[84] = 84;
	x[85] = 0;
	y[85] = 85;
	x[86] = 0;
	y[86] = 86;
	x[87] = 0;
	y[87] = 87;
	x[88] = 0;
	y[88] = 88;
	x[89] = 0;
	y[89] = 89;
	x[90] = 0;
	y[90] = 90;
	x[91] = 0;
	y[91] = 91;
	x[92] = 0;
	y[92] = 92;
	x[93] = 0;
	y[93] = 93;
	x[94] = 0;
	y[94] = 94;
	x[95] = 0;
	y[95] = 95;
	x[96] = 0;
	y[96] = 96;
	x[97] = 0;
	y[97] = 97;
	x[98] = 0;
	y[98] = 98;
	x[99] = 0;
	y[99] = 99;
	x[100] = 0;
	y[100] = 100;
	x[101] = 0;
	y[101] = 101;
	x[102] = 0;
	y[102] = 102;
	x[103] = 0;
	y[103] = 103;
	x[104] = 0;
	y[104] = 104;
	x[105] = 0;
	y[105] = 105;
	x[106] = 0;
	y[106] = 106;
	x[107] = 0;
	y[107] = 107;
	x[108] = 0;
	y[108] = 108;
	x[109] = 0;
	y[109] = 109;
	x[110] = 0;
	y[110] = 110;
	x[111] = 0;
	y[111] = 111;
	x[112] = 0;
	y[112] = 112;
	x[113] = 0;
	y[113] = 113;
	x[114] = 0;
	y[114] = 114;
	x[115] = 0;
	y[115] = 115;
	x[116] = 0;
	y[116] = 116;
	x[117] = 0;
	y[117] = 117;
	x[118] = 0;
	y[118] = 118;
	x[119] = 0;
	y[119] = 119;
	x[120] = 0;
	y[120] = 120;
	x[121] = 0;
	y[121] = 121;
	x[122] = 0;
	y[122] = 122;
	x[123] = 0;
	y[123] = 123;
	x[124] = 0;
	y[124] = 124;
	x[125] = 0;
	y[125] = 125;
	x[126] = 0;
	y[126] = 126;
	x[127] = 1;
	y[127] = 0;
	x[128] = 1;
	y[128] = 1;
	x[129] = 1;
	y[129] = 2;
	x[130] = 1;
	y[130] = 4;
	x[131] = 1;
	y[131] = 6;
	x[132] = 1;
	y[132] = 8;
	x[133] = 1;
	y[133] = 9;
	x[134] = 1;
	y[134] = 10;
	x[135] = 1;
	y[135] = 13;
	x[136] = 1;
	y[136] = 14;
	x[137] = 1;
	y[137] = 20;
	x[138] = 1;
	y[138] = 21;
	x[139] = 1;
	y[139] = 22;
	x[140] = 1;
	y[140] = 25;
	x[141] = 1;
	y[141] = 26;
	x[142] = 1;
	y[142] = 33;
	x[143] = 1;
	y[143] = 36;
	x[144] = 1;
	y[144] = 37;
	x[145] = 1;
	y[145] = 38;
	x[146] = 1;
	y[146] = 45;
	x[147] = 1;
	y[147] = 48;
	x[148] = 1;
	y[148] = 50;
	x[149] = 1;
	y[149] = 52;
	x[150] = 1;
	y[150] = 53;
	x[151] = 1;
	y[151] = 54;
	x[152] = 1;
	y[152] = 57;
	x[153] = 1;
	y[153] = 58;
	x[154] = 1;
	y[154] = 61;
	x[155] = 1;
	y[155] = 64;
	x[156] = 1;
	y[156] = 66;
	x[157] = 1;
	y[157] = 68;
	x[158] = 1;
	y[158] = 69;
	x[159] = 1;
	y[159] = 70;
	x[160] = 1;
	y[160] = 73;
	x[161] = 1;
	y[161] = 74;
	x[162] = 1;
	y[162] = 75;
	x[163] = 1;
	y[163] = 77;
	x[164] = 1;
	y[164] = 78;
	x[165] = 1;
	y[165] = 79;
	x[166] = 1;
	y[166] = 81;
	x[167] = 1;
	y[167] = 82;
	x[168] = 1;
	y[168] = 83;
	x[169] = 1;
	y[169] = 85;
	x[170] = 1;
	y[170] = 86;
	x[171] = 1;
	y[171] = 87;
	x[172] = 1;
	y[172] = 90;
	x[173] = 1;
	y[173] = 91;
	x[174] = 1;
	y[174] = 93;
	x[175] = 1;
	y[175] = 94;
	x[176] = 1;
	y[176] = 95;
	x[177] = 1;
	y[177] = 101;
	x[178] = 1;
	y[178] = 102;
	x[179] = 1;
	y[179] = 103;
	x[180] = 1;
	y[180] = 106;
	x[181] = 1;
	y[181] = 107;
	x[182] = 1;
	y[182] = 113;
	x[183] = 1;
	y[183] = 114;
	x[184] = 1;
	y[184] = 115;
	x[185] = 1;
	y[185] = 117;
	x[186] = 1;
	y[186] = 118;
	x[187] = 1;
	y[187] = 119;
	x[188] = 1;
	y[188] = 121;
	x[189] = 1;
	y[189] = 122;
	x[190] = 1;
	y[190] = 123;
	x[191] = 2;
	y[191] = 1;
	x[192] = 2;
	y[192] = 4;
	x[193] = 2;
	y[193] = 6;
	x[194] = 2;
	y[194] = 9;
	x[195] = 2;
	y[195] = 12;
	x[196] = 2;
	y[196] = 21;
	x[197] = 2;
	y[197] = 24;
	x[198] = 2;
	y[198] = 32;
	x[199] = 2;
	y[199] = 34;
	x[200] = 2;
	y[200] = 36;
	x[201] = 2;
	y[201] = 38;
	x[202] = 2;
	y[202] = 44;
	x[203] = 2;
	y[203] = 46;
	x[204] = 2;
	y[204] = 48;
	x[205] = 2;
	y[205] = 50;
	x[206] = 2;
	y[206] = 52;
	x[207] = 2;
	y[207] = 56;
	x[208] = 2;
	y[208] = 60;
	x[209] = 2;
	y[209] = 62;
	x[210] = 2;
	y[210] = 64;
	x[211] = 2;
	y[211] = 65;
	x[212] = 2;
	y[212] = 66;
	x[213] = 2;
	y[213] = 68;
	x[214] = 2;
	y[214] = 73;
	x[215] = 2;
	y[215] = 77;
	x[216] = 2;
	y[216] = 81;
	x[217] = 2;
	y[217] = 85;
	x[218] = 2;
	y[218] = 89;
	x[219] = 2;
	y[219] = 94;
	x[220] = 2;
	y[220] = 102;
	x[221] = 2;
	y[221] = 105;
	x[222] = 2;
	y[222] = 114;
	x[223] = 2;
	y[223] = 118;
	x[224] = 2;
	y[224] = 123;
	x[225] = 3;
	y[225] = 1;
	x[226] = 3;
	y[226] = 4;
	x[227] = 3;
	y[227] = 5;
	x[228] = 3;
	y[228] = 6;
	x[229] = 3;
	y[229] = 9;
	x[230] = 3;
	y[230] = 13;
	x[231] = 3;
	y[231] = 21;
	x[232] = 3;
	y[232] = 25;
	x[233] = 3;
	y[233] = 32;
	x[234] = 3;
	y[234] = 33;
	x[235] = 3;
	y[235] = 34;
	x[236] = 3;
	y[236] = 36;
	x[237] = 3;
	y[237] = 38;
	x[238] = 3;
	y[238] = 44;
	x[239] = 3;
	y[239] = 45;
	x[240] = 3;
	y[240] = 46;
	x[241] = 3;
	y[241] = 48;
	x[242] = 3;
	y[242] = 49;
	x[243] = 3;
	y[243] = 50;
	x[244] = 3;
	y[244] = 52;
	x[245] = 3;
	y[245] = 53;
	x[246] = 3;
	y[246] = 57;
	x[247] = 3;
	y[247] = 60;
	x[248] = 3;
	y[248] = 62;
	x[249] = 3;
	y[249] = 64;
	x[250] = 3;
	y[250] = 65;
	x[251] = 3;
	y[251] = 66;
	x[252] = 3;
	y[252] = 68;
	x[253] = 3;
	y[253] = 69;
	x[254] = 3;
	y[254] = 73;
	x[255] = 3;
	y[255] = 74;
	x[256] = 3;
	y[256] = 77;
	x[257] = 3;
	y[257] = 78;
	x[258] = 3;
	y[258] = 81;
	x[259] = 3;
	y[259] = 82;
	x[260] = 3;
	y[260] = 85;
	x[261] = 3;
	y[261] = 86;
	x[262] = 3;
	y[262] = 89;
	x[263] = 3;
	y[263] = 94;
	x[264] = 3;
	y[264] = 102;
	x[265] = 3;
	y[265] = 106;
	x[266] = 3;
	y[266] = 114;
	x[267] = 3;
	y[267] = 118;
	x[268] = 3;
	y[268] = 122;
	x[269] = 3;
	y[269] = 123;
	x[270] = 4;
	y[270] = 1;
	x[271] = 4;
	y[271] = 4;
	x[272] = 4;
	y[272] = 6;
	x[273] = 4;
	y[273] = 9;
	x[274] = 4;
	y[274] = 14;
	x[275] = 4;
	y[275] = 21;
	x[276] = 4;
	y[276] = 26;
	x[277] = 4;
	y[277] = 32;
	x[278] = 4;
	y[278] = 34;
	x[279] = 4;
	y[279] = 36;
	x[280] = 4;
	y[280] = 38;
	x[281] = 4;
	y[281] = 44;
	x[282] = 4;
	y[282] = 46;
	x[283] = 4;
	y[283] = 48;
	x[284] = 4;
	y[284] = 49;
	x[285] = 4;
	y[285] = 50;
	x[286] = 4;
	y[286] = 52;
	x[287] = 4;
	y[287] = 58;
	x[288] = 4;
	y[288] = 60;
	x[289] = 4;
	y[289] = 62;
	x[290] = 4;
	y[290] = 64;
	x[291] = 4;
	y[291] = 66;
	x[292] = 4;
	y[292] = 68;
	x[293] = 4;
	y[293] = 73;
	x[294] = 4;
	y[294] = 77;
	x[295] = 4;
	y[295] = 81;
	x[296] = 4;
	y[296] = 85;
	x[297] = 4;
	y[297] = 89;
	x[298] = 4;
	y[298] = 94;
	x[299] = 4;
	y[299] = 102;
	x[300] = 4;
	y[300] = 107;
	x[301] = 4;
	y[301] = 114;
	x[302] = 4;
	y[302] = 118;
	x[303] = 5;
	y[303] = 1;
	x[304] = 5;
	y[304] = 4;
	x[305] = 5;
	y[305] = 6;
	x[306] = 5;
	y[306] = 8;
	x[307] = 5;
	y[307] = 9;
	x[308] = 5;
	y[308] = 10;
	x[309] = 5;
	y[309] = 12;
	x[310] = 5;
	y[310] = 13;
	x[311] = 5;
	y[311] = 20;
	x[312] = 5;
	y[312] = 21;
	x[313] = 5;
	y[313] = 22;
	x[314] = 5;
	y[314] = 24;
	x[315] = 5;
	y[315] = 25;
	x[316] = 5;
	y[316] = 32;
	x[317] = 5;
	y[317] = 34;
	x[318] = 5;
	y[318] = 36;
	x[319] = 5;
	y[319] = 38;
	x[320] = 5;
	y[320] = 44;
	x[321] = 5;
	y[321] = 46;
	x[322] = 5;
	y[322] = 48;
	x[323] = 5;
	y[323] = 50;
	x[324] = 5;
	y[324] = 52;
	x[325] = 5;
	y[325] = 53;
	x[326] = 5;
	y[326] = 54;
	x[327] = 5;
	y[327] = 56;
	x[328] = 5;
	y[328] = 57;
	x[329] = 5;
	y[329] = 61;
	x[330] = 5;
	y[330] = 64;
	x[331] = 5;
	y[331] = 66;
	x[332] = 5;
	y[332] = 68;
	x[333] = 5;
	y[333] = 69;
	x[334] = 5;
	y[334] = 70;
	x[335] = 5;
	y[335] = 73;
	x[336] = 5;
	y[336] = 74;
	x[337] = 5;
	y[337] = 75;
	x[338] = 5;
	y[338] = 77;
	x[339] = 5;
	y[339] = 81;
	x[340] = 5;
	y[340] = 85;
	x[341] = 5;
	y[341] = 86;
	x[342] = 5;
	y[342] = 87;
	x[343] = 5;
	y[343] = 90;
	x[344] = 5;
	y[344] = 91;
	x[345] = 5;
	y[345] = 94;
	x[346] = 5;
	y[346] = 101;
	x[347] = 5;
	y[347] = 102;
	x[348] = 5;
	y[348] = 103;
	x[349] = 5;
	y[349] = 105;
	x[350] = 5;
	y[350] = 106;
	x[351] = 5;
	y[351] = 113;
	x[352] = 5;
	y[352] = 114;
	x[353] = 5;
	y[353] = 115;
	x[354] = 5;
	y[354] = 118;
	x[355] = 5;
	y[355] = 122;


	AbstractPoint a(nsx,nsy,x,y,size,'#');
	return a;
}
